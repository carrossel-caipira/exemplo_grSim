// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_simulation_synchronous.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ssl_5fsimulation_5fsynchronous_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ssl_5fsimulation_5fsynchronous_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021010 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ssl_vision_detection.pb.h"
#include "ssl_simulation_robot_feedback.pb.h"
#include "ssl_simulation_robot_control.pb.h"
#include "ssl_simulation_control.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ssl_5fsimulation_5fsynchronous_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ssl_5fsimulation_5fsynchronous_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ssl_5fsimulation_5fsynchronous_2eproto;
class SimulationSyncRequest;
struct SimulationSyncRequestDefaultTypeInternal;
extern SimulationSyncRequestDefaultTypeInternal _SimulationSyncRequest_default_instance_;
class SimulationSyncResponse;
struct SimulationSyncResponseDefaultTypeInternal;
extern SimulationSyncResponseDefaultTypeInternal _SimulationSyncResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::SimulationSyncRequest* Arena::CreateMaybeMessage<::SimulationSyncRequest>(Arena*);
template<> ::SimulationSyncResponse* Arena::CreateMaybeMessage<::SimulationSyncResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class SimulationSyncRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SimulationSyncRequest) */ {
 public:
  inline SimulationSyncRequest() : SimulationSyncRequest(nullptr) {}
  ~SimulationSyncRequest() override;
  explicit PROTOBUF_CONSTEXPR SimulationSyncRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimulationSyncRequest(const SimulationSyncRequest& from);
  SimulationSyncRequest(SimulationSyncRequest&& from) noexcept
    : SimulationSyncRequest() {
    *this = ::std::move(from);
  }

  inline SimulationSyncRequest& operator=(const SimulationSyncRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimulationSyncRequest& operator=(SimulationSyncRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimulationSyncRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimulationSyncRequest* internal_default_instance() {
    return reinterpret_cast<const SimulationSyncRequest*>(
               &_SimulationSyncRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SimulationSyncRequest& a, SimulationSyncRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SimulationSyncRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimulationSyncRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimulationSyncRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimulationSyncRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimulationSyncRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SimulationSyncRequest& from) {
    SimulationSyncRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimulationSyncRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SimulationSyncRequest";
  }
  protected:
  explicit SimulationSyncRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSimulatorCommandFieldNumber = 2,
    kRobotControlFieldNumber = 3,
    kSimStepFieldNumber = 1,
  };
  // optional .SimulatorCommand simulator_command = 2;
  bool has_simulator_command() const;
  private:
  bool _internal_has_simulator_command() const;
  public:
  void clear_simulator_command();
  const ::SimulatorCommand& simulator_command() const;
  PROTOBUF_NODISCARD ::SimulatorCommand* release_simulator_command();
  ::SimulatorCommand* mutable_simulator_command();
  void set_allocated_simulator_command(::SimulatorCommand* simulator_command);
  private:
  const ::SimulatorCommand& _internal_simulator_command() const;
  ::SimulatorCommand* _internal_mutable_simulator_command();
  public:
  void unsafe_arena_set_allocated_simulator_command(
      ::SimulatorCommand* simulator_command);
  ::SimulatorCommand* unsafe_arena_release_simulator_command();

  // optional .RobotControl robot_control = 3;
  bool has_robot_control() const;
  private:
  bool _internal_has_robot_control() const;
  public:
  void clear_robot_control();
  const ::RobotControl& robot_control() const;
  PROTOBUF_NODISCARD ::RobotControl* release_robot_control();
  ::RobotControl* mutable_robot_control();
  void set_allocated_robot_control(::RobotControl* robot_control);
  private:
  const ::RobotControl& _internal_robot_control() const;
  ::RobotControl* _internal_mutable_robot_control();
  public:
  void unsafe_arena_set_allocated_robot_control(
      ::RobotControl* robot_control);
  ::RobotControl* unsafe_arena_release_robot_control();

  // optional float sim_step = 1;
  bool has_sim_step() const;
  private:
  bool _internal_has_sim_step() const;
  public:
  void clear_sim_step();
  float sim_step() const;
  void set_sim_step(float value);
  private:
  float _internal_sim_step() const;
  void _internal_set_sim_step(float value);
  public:

  // @@protoc_insertion_point(class_scope:SimulationSyncRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::SimulatorCommand* simulator_command_;
    ::RobotControl* robot_control_;
    float sim_step_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fsimulation_5fsynchronous_2eproto;
};
// -------------------------------------------------------------------

class SimulationSyncResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SimulationSyncResponse) */ {
 public:
  inline SimulationSyncResponse() : SimulationSyncResponse(nullptr) {}
  ~SimulationSyncResponse() override;
  explicit PROTOBUF_CONSTEXPR SimulationSyncResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimulationSyncResponse(const SimulationSyncResponse& from);
  SimulationSyncResponse(SimulationSyncResponse&& from) noexcept
    : SimulationSyncResponse() {
    *this = ::std::move(from);
  }

  inline SimulationSyncResponse& operator=(const SimulationSyncResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimulationSyncResponse& operator=(SimulationSyncResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimulationSyncResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimulationSyncResponse* internal_default_instance() {
    return reinterpret_cast<const SimulationSyncResponse*>(
               &_SimulationSyncResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SimulationSyncResponse& a, SimulationSyncResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SimulationSyncResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimulationSyncResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimulationSyncResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimulationSyncResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimulationSyncResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SimulationSyncResponse& from) {
    SimulationSyncResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimulationSyncResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SimulationSyncResponse";
  }
  protected:
  explicit SimulationSyncResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetectionFieldNumber = 1,
    kRobotControlResponseFieldNumber = 2,
  };
  // repeated .SSL_DetectionFrame detection = 1;
  int detection_size() const;
  private:
  int _internal_detection_size() const;
  public:
  void clear_detection();
  ::SSL_DetectionFrame* mutable_detection(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_DetectionFrame >*
      mutable_detection();
  private:
  const ::SSL_DetectionFrame& _internal_detection(int index) const;
  ::SSL_DetectionFrame* _internal_add_detection();
  public:
  const ::SSL_DetectionFrame& detection(int index) const;
  ::SSL_DetectionFrame* add_detection();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_DetectionFrame >&
      detection() const;

  // optional .RobotControlResponse robot_control_response = 2;
  bool has_robot_control_response() const;
  private:
  bool _internal_has_robot_control_response() const;
  public:
  void clear_robot_control_response();
  const ::RobotControlResponse& robot_control_response() const;
  PROTOBUF_NODISCARD ::RobotControlResponse* release_robot_control_response();
  ::RobotControlResponse* mutable_robot_control_response();
  void set_allocated_robot_control_response(::RobotControlResponse* robot_control_response);
  private:
  const ::RobotControlResponse& _internal_robot_control_response() const;
  ::RobotControlResponse* _internal_mutable_robot_control_response();
  public:
  void unsafe_arena_set_allocated_robot_control_response(
      ::RobotControlResponse* robot_control_response);
  ::RobotControlResponse* unsafe_arena_release_robot_control_response();

  // @@protoc_insertion_point(class_scope:SimulationSyncResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_DetectionFrame > detection_;
    ::RobotControlResponse* robot_control_response_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fsimulation_5fsynchronous_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SimulationSyncRequest

// optional float sim_step = 1;
inline bool SimulationSyncRequest::_internal_has_sim_step() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SimulationSyncRequest::has_sim_step() const {
  return _internal_has_sim_step();
}
inline void SimulationSyncRequest::clear_sim_step() {
  _impl_.sim_step_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float SimulationSyncRequest::_internal_sim_step() const {
  return _impl_.sim_step_;
}
inline float SimulationSyncRequest::sim_step() const {
  // @@protoc_insertion_point(field_get:SimulationSyncRequest.sim_step)
  return _internal_sim_step();
}
inline void SimulationSyncRequest::_internal_set_sim_step(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.sim_step_ = value;
}
inline void SimulationSyncRequest::set_sim_step(float value) {
  _internal_set_sim_step(value);
  // @@protoc_insertion_point(field_set:SimulationSyncRequest.sim_step)
}

// optional .SimulatorCommand simulator_command = 2;
inline bool SimulationSyncRequest::_internal_has_simulator_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.simulator_command_ != nullptr);
  return value;
}
inline bool SimulationSyncRequest::has_simulator_command() const {
  return _internal_has_simulator_command();
}
inline const ::SimulatorCommand& SimulationSyncRequest::_internal_simulator_command() const {
  const ::SimulatorCommand* p = _impl_.simulator_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::SimulatorCommand&>(
      ::_SimulatorCommand_default_instance_);
}
inline const ::SimulatorCommand& SimulationSyncRequest::simulator_command() const {
  // @@protoc_insertion_point(field_get:SimulationSyncRequest.simulator_command)
  return _internal_simulator_command();
}
inline void SimulationSyncRequest::unsafe_arena_set_allocated_simulator_command(
    ::SimulatorCommand* simulator_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.simulator_command_);
  }
  _impl_.simulator_command_ = simulator_command;
  if (simulator_command) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SimulationSyncRequest.simulator_command)
}
inline ::SimulatorCommand* SimulationSyncRequest::release_simulator_command() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::SimulatorCommand* temp = _impl_.simulator_command_;
  _impl_.simulator_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SimulatorCommand* SimulationSyncRequest::unsafe_arena_release_simulator_command() {
  // @@protoc_insertion_point(field_release:SimulationSyncRequest.simulator_command)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::SimulatorCommand* temp = _impl_.simulator_command_;
  _impl_.simulator_command_ = nullptr;
  return temp;
}
inline ::SimulatorCommand* SimulationSyncRequest::_internal_mutable_simulator_command() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.simulator_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::SimulatorCommand>(GetArenaForAllocation());
    _impl_.simulator_command_ = p;
  }
  return _impl_.simulator_command_;
}
inline ::SimulatorCommand* SimulationSyncRequest::mutable_simulator_command() {
  ::SimulatorCommand* _msg = _internal_mutable_simulator_command();
  // @@protoc_insertion_point(field_mutable:SimulationSyncRequest.simulator_command)
  return _msg;
}
inline void SimulationSyncRequest::set_allocated_simulator_command(::SimulatorCommand* simulator_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.simulator_command_);
  }
  if (simulator_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(simulator_command));
    if (message_arena != submessage_arena) {
      simulator_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, simulator_command, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.simulator_command_ = simulator_command;
  // @@protoc_insertion_point(field_set_allocated:SimulationSyncRequest.simulator_command)
}

// optional .RobotControl robot_control = 3;
inline bool SimulationSyncRequest::_internal_has_robot_control() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.robot_control_ != nullptr);
  return value;
}
inline bool SimulationSyncRequest::has_robot_control() const {
  return _internal_has_robot_control();
}
inline const ::RobotControl& SimulationSyncRequest::_internal_robot_control() const {
  const ::RobotControl* p = _impl_.robot_control_;
  return p != nullptr ? *p : reinterpret_cast<const ::RobotControl&>(
      ::_RobotControl_default_instance_);
}
inline const ::RobotControl& SimulationSyncRequest::robot_control() const {
  // @@protoc_insertion_point(field_get:SimulationSyncRequest.robot_control)
  return _internal_robot_control();
}
inline void SimulationSyncRequest::unsafe_arena_set_allocated_robot_control(
    ::RobotControl* robot_control) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.robot_control_);
  }
  _impl_.robot_control_ = robot_control;
  if (robot_control) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SimulationSyncRequest.robot_control)
}
inline ::RobotControl* SimulationSyncRequest::release_robot_control() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::RobotControl* temp = _impl_.robot_control_;
  _impl_.robot_control_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::RobotControl* SimulationSyncRequest::unsafe_arena_release_robot_control() {
  // @@protoc_insertion_point(field_release:SimulationSyncRequest.robot_control)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::RobotControl* temp = _impl_.robot_control_;
  _impl_.robot_control_ = nullptr;
  return temp;
}
inline ::RobotControl* SimulationSyncRequest::_internal_mutable_robot_control() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.robot_control_ == nullptr) {
    auto* p = CreateMaybeMessage<::RobotControl>(GetArenaForAllocation());
    _impl_.robot_control_ = p;
  }
  return _impl_.robot_control_;
}
inline ::RobotControl* SimulationSyncRequest::mutable_robot_control() {
  ::RobotControl* _msg = _internal_mutable_robot_control();
  // @@protoc_insertion_point(field_mutable:SimulationSyncRequest.robot_control)
  return _msg;
}
inline void SimulationSyncRequest::set_allocated_robot_control(::RobotControl* robot_control) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.robot_control_);
  }
  if (robot_control) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(robot_control));
    if (message_arena != submessage_arena) {
      robot_control = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, robot_control, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.robot_control_ = robot_control;
  // @@protoc_insertion_point(field_set_allocated:SimulationSyncRequest.robot_control)
}

// -------------------------------------------------------------------

// SimulationSyncResponse

// repeated .SSL_DetectionFrame detection = 1;
inline int SimulationSyncResponse::_internal_detection_size() const {
  return _impl_.detection_.size();
}
inline int SimulationSyncResponse::detection_size() const {
  return _internal_detection_size();
}
inline ::SSL_DetectionFrame* SimulationSyncResponse::mutable_detection(int index) {
  // @@protoc_insertion_point(field_mutable:SimulationSyncResponse.detection)
  return _impl_.detection_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_DetectionFrame >*
SimulationSyncResponse::mutable_detection() {
  // @@protoc_insertion_point(field_mutable_list:SimulationSyncResponse.detection)
  return &_impl_.detection_;
}
inline const ::SSL_DetectionFrame& SimulationSyncResponse::_internal_detection(int index) const {
  return _impl_.detection_.Get(index);
}
inline const ::SSL_DetectionFrame& SimulationSyncResponse::detection(int index) const {
  // @@protoc_insertion_point(field_get:SimulationSyncResponse.detection)
  return _internal_detection(index);
}
inline ::SSL_DetectionFrame* SimulationSyncResponse::_internal_add_detection() {
  return _impl_.detection_.Add();
}
inline ::SSL_DetectionFrame* SimulationSyncResponse::add_detection() {
  ::SSL_DetectionFrame* _add = _internal_add_detection();
  // @@protoc_insertion_point(field_add:SimulationSyncResponse.detection)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SSL_DetectionFrame >&
SimulationSyncResponse::detection() const {
  // @@protoc_insertion_point(field_list:SimulationSyncResponse.detection)
  return _impl_.detection_;
}

// optional .RobotControlResponse robot_control_response = 2;
inline bool SimulationSyncResponse::_internal_has_robot_control_response() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.robot_control_response_ != nullptr);
  return value;
}
inline bool SimulationSyncResponse::has_robot_control_response() const {
  return _internal_has_robot_control_response();
}
inline const ::RobotControlResponse& SimulationSyncResponse::_internal_robot_control_response() const {
  const ::RobotControlResponse* p = _impl_.robot_control_response_;
  return p != nullptr ? *p : reinterpret_cast<const ::RobotControlResponse&>(
      ::_RobotControlResponse_default_instance_);
}
inline const ::RobotControlResponse& SimulationSyncResponse::robot_control_response() const {
  // @@protoc_insertion_point(field_get:SimulationSyncResponse.robot_control_response)
  return _internal_robot_control_response();
}
inline void SimulationSyncResponse::unsafe_arena_set_allocated_robot_control_response(
    ::RobotControlResponse* robot_control_response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.robot_control_response_);
  }
  _impl_.robot_control_response_ = robot_control_response;
  if (robot_control_response) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SimulationSyncResponse.robot_control_response)
}
inline ::RobotControlResponse* SimulationSyncResponse::release_robot_control_response() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::RobotControlResponse* temp = _impl_.robot_control_response_;
  _impl_.robot_control_response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::RobotControlResponse* SimulationSyncResponse::unsafe_arena_release_robot_control_response() {
  // @@protoc_insertion_point(field_release:SimulationSyncResponse.robot_control_response)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::RobotControlResponse* temp = _impl_.robot_control_response_;
  _impl_.robot_control_response_ = nullptr;
  return temp;
}
inline ::RobotControlResponse* SimulationSyncResponse::_internal_mutable_robot_control_response() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.robot_control_response_ == nullptr) {
    auto* p = CreateMaybeMessage<::RobotControlResponse>(GetArenaForAllocation());
    _impl_.robot_control_response_ = p;
  }
  return _impl_.robot_control_response_;
}
inline ::RobotControlResponse* SimulationSyncResponse::mutable_robot_control_response() {
  ::RobotControlResponse* _msg = _internal_mutable_robot_control_response();
  // @@protoc_insertion_point(field_mutable:SimulationSyncResponse.robot_control_response)
  return _msg;
}
inline void SimulationSyncResponse::set_allocated_robot_control_response(::RobotControlResponse* robot_control_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.robot_control_response_);
  }
  if (robot_control_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(robot_control_response));
    if (message_arena != submessage_arena) {
      robot_control_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, robot_control_response, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.robot_control_response_ = robot_control_response;
  // @@protoc_insertion_point(field_set_allocated:SimulationSyncResponse.robot_control_response)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ssl_5fsimulation_5fsynchronous_2eproto
