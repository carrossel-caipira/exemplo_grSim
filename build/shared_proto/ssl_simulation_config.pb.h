// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_simulation_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ssl_5fsimulation_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ssl_5fsimulation_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021010 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ssl_gc_common.pb.h"
#include "ssl_vision_geometry.pb.h"
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ssl_5fsimulation_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ssl_5fsimulation_5fconfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ssl_5fsimulation_5fconfig_2eproto;
class RealismConfig;
struct RealismConfigDefaultTypeInternal;
extern RealismConfigDefaultTypeInternal _RealismConfig_default_instance_;
class RobotLimits;
struct RobotLimitsDefaultTypeInternal;
extern RobotLimitsDefaultTypeInternal _RobotLimits_default_instance_;
class RobotSpecs;
struct RobotSpecsDefaultTypeInternal;
extern RobotSpecsDefaultTypeInternal _RobotSpecs_default_instance_;
class RobotWheelAngles;
struct RobotWheelAnglesDefaultTypeInternal;
extern RobotWheelAnglesDefaultTypeInternal _RobotWheelAngles_default_instance_;
class SimulatorConfig;
struct SimulatorConfigDefaultTypeInternal;
extern SimulatorConfigDefaultTypeInternal _SimulatorConfig_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::RealismConfig* Arena::CreateMaybeMessage<::RealismConfig>(Arena*);
template<> ::RobotLimits* Arena::CreateMaybeMessage<::RobotLimits>(Arena*);
template<> ::RobotSpecs* Arena::CreateMaybeMessage<::RobotSpecs>(Arena*);
template<> ::RobotWheelAngles* Arena::CreateMaybeMessage<::RobotWheelAngles>(Arena*);
template<> ::SimulatorConfig* Arena::CreateMaybeMessage<::SimulatorConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class RobotLimits final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RobotLimits) */ {
 public:
  inline RobotLimits() : RobotLimits(nullptr) {}
  ~RobotLimits() override;
  explicit PROTOBUF_CONSTEXPR RobotLimits(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RobotLimits(const RobotLimits& from);
  RobotLimits(RobotLimits&& from) noexcept
    : RobotLimits() {
    *this = ::std::move(from);
  }

  inline RobotLimits& operator=(const RobotLimits& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotLimits& operator=(RobotLimits&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RobotLimits& default_instance() {
    return *internal_default_instance();
  }
  static inline const RobotLimits* internal_default_instance() {
    return reinterpret_cast<const RobotLimits*>(
               &_RobotLimits_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RobotLimits& a, RobotLimits& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotLimits* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RobotLimits* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RobotLimits* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RobotLimits>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RobotLimits& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RobotLimits& from) {
    RobotLimits::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotLimits* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RobotLimits";
  }
  protected:
  explicit RobotLimits(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccSpeedupAbsoluteMaxFieldNumber = 1,
    kAccSpeedupAngularMaxFieldNumber = 2,
    kAccBrakeAbsoluteMaxFieldNumber = 3,
    kAccBrakeAngularMaxFieldNumber = 4,
    kVelAbsoluteMaxFieldNumber = 5,
    kVelAngularMaxFieldNumber = 6,
  };
  // optional float acc_speedup_absolute_max = 1;
  bool has_acc_speedup_absolute_max() const;
  private:
  bool _internal_has_acc_speedup_absolute_max() const;
  public:
  void clear_acc_speedup_absolute_max();
  float acc_speedup_absolute_max() const;
  void set_acc_speedup_absolute_max(float value);
  private:
  float _internal_acc_speedup_absolute_max() const;
  void _internal_set_acc_speedup_absolute_max(float value);
  public:

  // optional float acc_speedup_angular_max = 2;
  bool has_acc_speedup_angular_max() const;
  private:
  bool _internal_has_acc_speedup_angular_max() const;
  public:
  void clear_acc_speedup_angular_max();
  float acc_speedup_angular_max() const;
  void set_acc_speedup_angular_max(float value);
  private:
  float _internal_acc_speedup_angular_max() const;
  void _internal_set_acc_speedup_angular_max(float value);
  public:

  // optional float acc_brake_absolute_max = 3;
  bool has_acc_brake_absolute_max() const;
  private:
  bool _internal_has_acc_brake_absolute_max() const;
  public:
  void clear_acc_brake_absolute_max();
  float acc_brake_absolute_max() const;
  void set_acc_brake_absolute_max(float value);
  private:
  float _internal_acc_brake_absolute_max() const;
  void _internal_set_acc_brake_absolute_max(float value);
  public:

  // optional float acc_brake_angular_max = 4;
  bool has_acc_brake_angular_max() const;
  private:
  bool _internal_has_acc_brake_angular_max() const;
  public:
  void clear_acc_brake_angular_max();
  float acc_brake_angular_max() const;
  void set_acc_brake_angular_max(float value);
  private:
  float _internal_acc_brake_angular_max() const;
  void _internal_set_acc_brake_angular_max(float value);
  public:

  // optional float vel_absolute_max = 5;
  bool has_vel_absolute_max() const;
  private:
  bool _internal_has_vel_absolute_max() const;
  public:
  void clear_vel_absolute_max();
  float vel_absolute_max() const;
  void set_vel_absolute_max(float value);
  private:
  float _internal_vel_absolute_max() const;
  void _internal_set_vel_absolute_max(float value);
  public:

  // optional float vel_angular_max = 6;
  bool has_vel_angular_max() const;
  private:
  bool _internal_has_vel_angular_max() const;
  public:
  void clear_vel_angular_max();
  float vel_angular_max() const;
  void set_vel_angular_max(float value);
  private:
  float _internal_vel_angular_max() const;
  void _internal_set_vel_angular_max(float value);
  public:

  // @@protoc_insertion_point(class_scope:RobotLimits)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float acc_speedup_absolute_max_;
    float acc_speedup_angular_max_;
    float acc_brake_absolute_max_;
    float acc_brake_angular_max_;
    float vel_absolute_max_;
    float vel_angular_max_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fsimulation_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class RobotWheelAngles final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RobotWheelAngles) */ {
 public:
  inline RobotWheelAngles() : RobotWheelAngles(nullptr) {}
  ~RobotWheelAngles() override;
  explicit PROTOBUF_CONSTEXPR RobotWheelAngles(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RobotWheelAngles(const RobotWheelAngles& from);
  RobotWheelAngles(RobotWheelAngles&& from) noexcept
    : RobotWheelAngles() {
    *this = ::std::move(from);
  }

  inline RobotWheelAngles& operator=(const RobotWheelAngles& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotWheelAngles& operator=(RobotWheelAngles&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RobotWheelAngles& default_instance() {
    return *internal_default_instance();
  }
  static inline const RobotWheelAngles* internal_default_instance() {
    return reinterpret_cast<const RobotWheelAngles*>(
               &_RobotWheelAngles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RobotWheelAngles& a, RobotWheelAngles& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotWheelAngles* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RobotWheelAngles* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RobotWheelAngles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RobotWheelAngles>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RobotWheelAngles& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RobotWheelAngles& from) {
    RobotWheelAngles::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotWheelAngles* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RobotWheelAngles";
  }
  protected:
  explicit RobotWheelAngles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrontRightFieldNumber = 1,
    kBackRightFieldNumber = 2,
    kBackLeftFieldNumber = 3,
    kFrontLeftFieldNumber = 4,
  };
  // required float front_right = 1;
  bool has_front_right() const;
  private:
  bool _internal_has_front_right() const;
  public:
  void clear_front_right();
  float front_right() const;
  void set_front_right(float value);
  private:
  float _internal_front_right() const;
  void _internal_set_front_right(float value);
  public:

  // required float back_right = 2;
  bool has_back_right() const;
  private:
  bool _internal_has_back_right() const;
  public:
  void clear_back_right();
  float back_right() const;
  void set_back_right(float value);
  private:
  float _internal_back_right() const;
  void _internal_set_back_right(float value);
  public:

  // required float back_left = 3;
  bool has_back_left() const;
  private:
  bool _internal_has_back_left() const;
  public:
  void clear_back_left();
  float back_left() const;
  void set_back_left(float value);
  private:
  float _internal_back_left() const;
  void _internal_set_back_left(float value);
  public:

  // required float front_left = 4;
  bool has_front_left() const;
  private:
  bool _internal_has_front_left() const;
  public:
  void clear_front_left();
  float front_left() const;
  void set_front_left(float value);
  private:
  float _internal_front_left() const;
  void _internal_set_front_left(float value);
  public:

  // @@protoc_insertion_point(class_scope:RobotWheelAngles)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float front_right_;
    float back_right_;
    float back_left_;
    float front_left_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fsimulation_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class RobotSpecs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RobotSpecs) */ {
 public:
  inline RobotSpecs() : RobotSpecs(nullptr) {}
  ~RobotSpecs() override;
  explicit PROTOBUF_CONSTEXPR RobotSpecs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RobotSpecs(const RobotSpecs& from);
  RobotSpecs(RobotSpecs&& from) noexcept
    : RobotSpecs() {
    *this = ::std::move(from);
  }

  inline RobotSpecs& operator=(const RobotSpecs& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotSpecs& operator=(RobotSpecs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RobotSpecs& default_instance() {
    return *internal_default_instance();
  }
  static inline const RobotSpecs* internal_default_instance() {
    return reinterpret_cast<const RobotSpecs*>(
               &_RobotSpecs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RobotSpecs& a, RobotSpecs& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotSpecs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RobotSpecs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RobotSpecs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RobotSpecs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RobotSpecs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RobotSpecs& from) {
    RobotSpecs::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotSpecs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RobotSpecs";
  }
  protected:
  explicit RobotSpecs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kLimitsFieldNumber = 10,
    kWheelAnglesFieldNumber = 13,
    kCustomFieldNumber = 14,
    kMassFieldNumber = 4,
    kMaxLinearKickSpeedFieldNumber = 7,
    kMaxChipKickSpeedFieldNumber = 8,
    kCenterToDribblerFieldNumber = 9,
    kRadiusFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // required .RobotId id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::RobotId& id() const;
  PROTOBUF_NODISCARD ::RobotId* release_id();
  ::RobotId* mutable_id();
  void set_allocated_id(::RobotId* id);
  private:
  const ::RobotId& _internal_id() const;
  ::RobotId* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::RobotId* id);
  ::RobotId* unsafe_arena_release_id();

  // optional .RobotLimits limits = 10;
  bool has_limits() const;
  private:
  bool _internal_has_limits() const;
  public:
  void clear_limits();
  const ::RobotLimits& limits() const;
  PROTOBUF_NODISCARD ::RobotLimits* release_limits();
  ::RobotLimits* mutable_limits();
  void set_allocated_limits(::RobotLimits* limits);
  private:
  const ::RobotLimits& _internal_limits() const;
  ::RobotLimits* _internal_mutable_limits();
  public:
  void unsafe_arena_set_allocated_limits(
      ::RobotLimits* limits);
  ::RobotLimits* unsafe_arena_release_limits();

  // optional .RobotWheelAngles wheel_angles = 13;
  bool has_wheel_angles() const;
  private:
  bool _internal_has_wheel_angles() const;
  public:
  void clear_wheel_angles();
  const ::RobotWheelAngles& wheel_angles() const;
  PROTOBUF_NODISCARD ::RobotWheelAngles* release_wheel_angles();
  ::RobotWheelAngles* mutable_wheel_angles();
  void set_allocated_wheel_angles(::RobotWheelAngles* wheel_angles);
  private:
  const ::RobotWheelAngles& _internal_wheel_angles() const;
  ::RobotWheelAngles* _internal_mutable_wheel_angles();
  public:
  void unsafe_arena_set_allocated_wheel_angles(
      ::RobotWheelAngles* wheel_angles);
  ::RobotWheelAngles* unsafe_arena_release_wheel_angles();

  // optional .google.protobuf.Any custom = 14;
  bool has_custom() const;
  private:
  bool _internal_has_custom() const;
  public:
  void clear_custom();
  const ::PROTOBUF_NAMESPACE_ID::Any& custom() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_custom();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_custom();
  void set_allocated_custom(::PROTOBUF_NAMESPACE_ID::Any* custom);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_custom() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_custom();
  public:
  void unsafe_arena_set_allocated_custom(
      ::PROTOBUF_NAMESPACE_ID::Any* custom);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_custom();

  // optional float mass = 4;
  bool has_mass() const;
  private:
  bool _internal_has_mass() const;
  public:
  void clear_mass();
  float mass() const;
  void set_mass(float value);
  private:
  float _internal_mass() const;
  void _internal_set_mass(float value);
  public:

  // optional float max_linear_kick_speed = 7;
  bool has_max_linear_kick_speed() const;
  private:
  bool _internal_has_max_linear_kick_speed() const;
  public:
  void clear_max_linear_kick_speed();
  float max_linear_kick_speed() const;
  void set_max_linear_kick_speed(float value);
  private:
  float _internal_max_linear_kick_speed() const;
  void _internal_set_max_linear_kick_speed(float value);
  public:

  // optional float max_chip_kick_speed = 8;
  bool has_max_chip_kick_speed() const;
  private:
  bool _internal_has_max_chip_kick_speed() const;
  public:
  void clear_max_chip_kick_speed();
  float max_chip_kick_speed() const;
  void set_max_chip_kick_speed(float value);
  private:
  float _internal_max_chip_kick_speed() const;
  void _internal_set_max_chip_kick_speed(float value);
  public:

  // optional float center_to_dribbler = 9;
  bool has_center_to_dribbler() const;
  private:
  bool _internal_has_center_to_dribbler() const;
  public:
  void clear_center_to_dribbler();
  float center_to_dribbler() const;
  void set_center_to_dribbler(float value);
  private:
  float _internal_center_to_dribbler() const;
  void _internal_set_center_to_dribbler(float value);
  public:

  // optional float radius = 2 [default = 0.09];
  bool has_radius() const;
  private:
  bool _internal_has_radius() const;
  public:
  void clear_radius();
  float radius() const;
  void set_radius(float value);
  private:
  float _internal_radius() const;
  void _internal_set_radius(float value);
  public:

  // optional float height = 3 [default = 0.15];
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  float height() const;
  void set_height(float value);
  private:
  float _internal_height() const;
  void _internal_set_height(float value);
  public:

  // @@protoc_insertion_point(class_scope:RobotSpecs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::RobotId* id_;
    ::RobotLimits* limits_;
    ::RobotWheelAngles* wheel_angles_;
    ::PROTOBUF_NAMESPACE_ID::Any* custom_;
    float mass_;
    float max_linear_kick_speed_;
    float max_chip_kick_speed_;
    float center_to_dribbler_;
    float radius_;
    float height_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fsimulation_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class RealismConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RealismConfig) */ {
 public:
  inline RealismConfig() : RealismConfig(nullptr) {}
  ~RealismConfig() override;
  explicit PROTOBUF_CONSTEXPR RealismConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RealismConfig(const RealismConfig& from);
  RealismConfig(RealismConfig&& from) noexcept
    : RealismConfig() {
    *this = ::std::move(from);
  }

  inline RealismConfig& operator=(const RealismConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline RealismConfig& operator=(RealismConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RealismConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const RealismConfig* internal_default_instance() {
    return reinterpret_cast<const RealismConfig*>(
               &_RealismConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RealismConfig& a, RealismConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(RealismConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RealismConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RealismConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RealismConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RealismConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RealismConfig& from) {
    RealismConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RealismConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RealismConfig";
  }
  protected:
  explicit RealismConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomFieldNumber = 1,
  };
  // optional .google.protobuf.Any custom = 1;
  bool has_custom() const;
  private:
  bool _internal_has_custom() const;
  public:
  void clear_custom();
  const ::PROTOBUF_NAMESPACE_ID::Any& custom() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_custom();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_custom();
  void set_allocated_custom(::PROTOBUF_NAMESPACE_ID::Any* custom);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_custom() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_custom();
  public:
  void unsafe_arena_set_allocated_custom(
      ::PROTOBUF_NAMESPACE_ID::Any* custom);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_custom();

  // @@protoc_insertion_point(class_scope:RealismConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::Any* custom_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fsimulation_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class SimulatorConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SimulatorConfig) */ {
 public:
  inline SimulatorConfig() : SimulatorConfig(nullptr) {}
  ~SimulatorConfig() override;
  explicit PROTOBUF_CONSTEXPR SimulatorConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimulatorConfig(const SimulatorConfig& from);
  SimulatorConfig(SimulatorConfig&& from) noexcept
    : SimulatorConfig() {
    *this = ::std::move(from);
  }

  inline SimulatorConfig& operator=(const SimulatorConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimulatorConfig& operator=(SimulatorConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimulatorConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimulatorConfig* internal_default_instance() {
    return reinterpret_cast<const SimulatorConfig*>(
               &_SimulatorConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SimulatorConfig& a, SimulatorConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(SimulatorConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimulatorConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimulatorConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimulatorConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimulatorConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SimulatorConfig& from) {
    SimulatorConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimulatorConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SimulatorConfig";
  }
  protected:
  explicit SimulatorConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotSpecsFieldNumber = 2,
    kGeometryFieldNumber = 1,
    kRealismConfigFieldNumber = 3,
    kVisionPortFieldNumber = 4,
  };
  // repeated .RobotSpecs robot_specs = 2;
  int robot_specs_size() const;
  private:
  int _internal_robot_specs_size() const;
  public:
  void clear_robot_specs();
  ::RobotSpecs* mutable_robot_specs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RobotSpecs >*
      mutable_robot_specs();
  private:
  const ::RobotSpecs& _internal_robot_specs(int index) const;
  ::RobotSpecs* _internal_add_robot_specs();
  public:
  const ::RobotSpecs& robot_specs(int index) const;
  ::RobotSpecs* add_robot_specs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RobotSpecs >&
      robot_specs() const;

  // optional .SSL_GeometryData geometry = 1;
  bool has_geometry() const;
  private:
  bool _internal_has_geometry() const;
  public:
  void clear_geometry();
  const ::SSL_GeometryData& geometry() const;
  PROTOBUF_NODISCARD ::SSL_GeometryData* release_geometry();
  ::SSL_GeometryData* mutable_geometry();
  void set_allocated_geometry(::SSL_GeometryData* geometry);
  private:
  const ::SSL_GeometryData& _internal_geometry() const;
  ::SSL_GeometryData* _internal_mutable_geometry();
  public:
  void unsafe_arena_set_allocated_geometry(
      ::SSL_GeometryData* geometry);
  ::SSL_GeometryData* unsafe_arena_release_geometry();

  // optional .RealismConfig realism_config = 3;
  bool has_realism_config() const;
  private:
  bool _internal_has_realism_config() const;
  public:
  void clear_realism_config();
  const ::RealismConfig& realism_config() const;
  PROTOBUF_NODISCARD ::RealismConfig* release_realism_config();
  ::RealismConfig* mutable_realism_config();
  void set_allocated_realism_config(::RealismConfig* realism_config);
  private:
  const ::RealismConfig& _internal_realism_config() const;
  ::RealismConfig* _internal_mutable_realism_config();
  public:
  void unsafe_arena_set_allocated_realism_config(
      ::RealismConfig* realism_config);
  ::RealismConfig* unsafe_arena_release_realism_config();

  // optional uint32 vision_port = 4;
  bool has_vision_port() const;
  private:
  bool _internal_has_vision_port() const;
  public:
  void clear_vision_port();
  uint32_t vision_port() const;
  void set_vision_port(uint32_t value);
  private:
  uint32_t _internal_vision_port() const;
  void _internal_set_vision_port(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SimulatorConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RobotSpecs > robot_specs_;
    ::SSL_GeometryData* geometry_;
    ::RealismConfig* realism_config_;
    uint32_t vision_port_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ssl_5fsimulation_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RobotLimits

// optional float acc_speedup_absolute_max = 1;
inline bool RobotLimits::_internal_has_acc_speedup_absolute_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RobotLimits::has_acc_speedup_absolute_max() const {
  return _internal_has_acc_speedup_absolute_max();
}
inline void RobotLimits::clear_acc_speedup_absolute_max() {
  _impl_.acc_speedup_absolute_max_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float RobotLimits::_internal_acc_speedup_absolute_max() const {
  return _impl_.acc_speedup_absolute_max_;
}
inline float RobotLimits::acc_speedup_absolute_max() const {
  // @@protoc_insertion_point(field_get:RobotLimits.acc_speedup_absolute_max)
  return _internal_acc_speedup_absolute_max();
}
inline void RobotLimits::_internal_set_acc_speedup_absolute_max(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.acc_speedup_absolute_max_ = value;
}
inline void RobotLimits::set_acc_speedup_absolute_max(float value) {
  _internal_set_acc_speedup_absolute_max(value);
  // @@protoc_insertion_point(field_set:RobotLimits.acc_speedup_absolute_max)
}

// optional float acc_speedup_angular_max = 2;
inline bool RobotLimits::_internal_has_acc_speedup_angular_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RobotLimits::has_acc_speedup_angular_max() const {
  return _internal_has_acc_speedup_angular_max();
}
inline void RobotLimits::clear_acc_speedup_angular_max() {
  _impl_.acc_speedup_angular_max_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float RobotLimits::_internal_acc_speedup_angular_max() const {
  return _impl_.acc_speedup_angular_max_;
}
inline float RobotLimits::acc_speedup_angular_max() const {
  // @@protoc_insertion_point(field_get:RobotLimits.acc_speedup_angular_max)
  return _internal_acc_speedup_angular_max();
}
inline void RobotLimits::_internal_set_acc_speedup_angular_max(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.acc_speedup_angular_max_ = value;
}
inline void RobotLimits::set_acc_speedup_angular_max(float value) {
  _internal_set_acc_speedup_angular_max(value);
  // @@protoc_insertion_point(field_set:RobotLimits.acc_speedup_angular_max)
}

// optional float acc_brake_absolute_max = 3;
inline bool RobotLimits::_internal_has_acc_brake_absolute_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RobotLimits::has_acc_brake_absolute_max() const {
  return _internal_has_acc_brake_absolute_max();
}
inline void RobotLimits::clear_acc_brake_absolute_max() {
  _impl_.acc_brake_absolute_max_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float RobotLimits::_internal_acc_brake_absolute_max() const {
  return _impl_.acc_brake_absolute_max_;
}
inline float RobotLimits::acc_brake_absolute_max() const {
  // @@protoc_insertion_point(field_get:RobotLimits.acc_brake_absolute_max)
  return _internal_acc_brake_absolute_max();
}
inline void RobotLimits::_internal_set_acc_brake_absolute_max(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.acc_brake_absolute_max_ = value;
}
inline void RobotLimits::set_acc_brake_absolute_max(float value) {
  _internal_set_acc_brake_absolute_max(value);
  // @@protoc_insertion_point(field_set:RobotLimits.acc_brake_absolute_max)
}

// optional float acc_brake_angular_max = 4;
inline bool RobotLimits::_internal_has_acc_brake_angular_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RobotLimits::has_acc_brake_angular_max() const {
  return _internal_has_acc_brake_angular_max();
}
inline void RobotLimits::clear_acc_brake_angular_max() {
  _impl_.acc_brake_angular_max_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float RobotLimits::_internal_acc_brake_angular_max() const {
  return _impl_.acc_brake_angular_max_;
}
inline float RobotLimits::acc_brake_angular_max() const {
  // @@protoc_insertion_point(field_get:RobotLimits.acc_brake_angular_max)
  return _internal_acc_brake_angular_max();
}
inline void RobotLimits::_internal_set_acc_brake_angular_max(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.acc_brake_angular_max_ = value;
}
inline void RobotLimits::set_acc_brake_angular_max(float value) {
  _internal_set_acc_brake_angular_max(value);
  // @@protoc_insertion_point(field_set:RobotLimits.acc_brake_angular_max)
}

// optional float vel_absolute_max = 5;
inline bool RobotLimits::_internal_has_vel_absolute_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RobotLimits::has_vel_absolute_max() const {
  return _internal_has_vel_absolute_max();
}
inline void RobotLimits::clear_vel_absolute_max() {
  _impl_.vel_absolute_max_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float RobotLimits::_internal_vel_absolute_max() const {
  return _impl_.vel_absolute_max_;
}
inline float RobotLimits::vel_absolute_max() const {
  // @@protoc_insertion_point(field_get:RobotLimits.vel_absolute_max)
  return _internal_vel_absolute_max();
}
inline void RobotLimits::_internal_set_vel_absolute_max(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.vel_absolute_max_ = value;
}
inline void RobotLimits::set_vel_absolute_max(float value) {
  _internal_set_vel_absolute_max(value);
  // @@protoc_insertion_point(field_set:RobotLimits.vel_absolute_max)
}

// optional float vel_angular_max = 6;
inline bool RobotLimits::_internal_has_vel_angular_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RobotLimits::has_vel_angular_max() const {
  return _internal_has_vel_angular_max();
}
inline void RobotLimits::clear_vel_angular_max() {
  _impl_.vel_angular_max_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float RobotLimits::_internal_vel_angular_max() const {
  return _impl_.vel_angular_max_;
}
inline float RobotLimits::vel_angular_max() const {
  // @@protoc_insertion_point(field_get:RobotLimits.vel_angular_max)
  return _internal_vel_angular_max();
}
inline void RobotLimits::_internal_set_vel_angular_max(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.vel_angular_max_ = value;
}
inline void RobotLimits::set_vel_angular_max(float value) {
  _internal_set_vel_angular_max(value);
  // @@protoc_insertion_point(field_set:RobotLimits.vel_angular_max)
}

// -------------------------------------------------------------------

// RobotWheelAngles

// required float front_right = 1;
inline bool RobotWheelAngles::_internal_has_front_right() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RobotWheelAngles::has_front_right() const {
  return _internal_has_front_right();
}
inline void RobotWheelAngles::clear_front_right() {
  _impl_.front_right_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float RobotWheelAngles::_internal_front_right() const {
  return _impl_.front_right_;
}
inline float RobotWheelAngles::front_right() const {
  // @@protoc_insertion_point(field_get:RobotWheelAngles.front_right)
  return _internal_front_right();
}
inline void RobotWheelAngles::_internal_set_front_right(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.front_right_ = value;
}
inline void RobotWheelAngles::set_front_right(float value) {
  _internal_set_front_right(value);
  // @@protoc_insertion_point(field_set:RobotWheelAngles.front_right)
}

// required float back_right = 2;
inline bool RobotWheelAngles::_internal_has_back_right() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RobotWheelAngles::has_back_right() const {
  return _internal_has_back_right();
}
inline void RobotWheelAngles::clear_back_right() {
  _impl_.back_right_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float RobotWheelAngles::_internal_back_right() const {
  return _impl_.back_right_;
}
inline float RobotWheelAngles::back_right() const {
  // @@protoc_insertion_point(field_get:RobotWheelAngles.back_right)
  return _internal_back_right();
}
inline void RobotWheelAngles::_internal_set_back_right(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.back_right_ = value;
}
inline void RobotWheelAngles::set_back_right(float value) {
  _internal_set_back_right(value);
  // @@protoc_insertion_point(field_set:RobotWheelAngles.back_right)
}

// required float back_left = 3;
inline bool RobotWheelAngles::_internal_has_back_left() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RobotWheelAngles::has_back_left() const {
  return _internal_has_back_left();
}
inline void RobotWheelAngles::clear_back_left() {
  _impl_.back_left_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float RobotWheelAngles::_internal_back_left() const {
  return _impl_.back_left_;
}
inline float RobotWheelAngles::back_left() const {
  // @@protoc_insertion_point(field_get:RobotWheelAngles.back_left)
  return _internal_back_left();
}
inline void RobotWheelAngles::_internal_set_back_left(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.back_left_ = value;
}
inline void RobotWheelAngles::set_back_left(float value) {
  _internal_set_back_left(value);
  // @@protoc_insertion_point(field_set:RobotWheelAngles.back_left)
}

// required float front_left = 4;
inline bool RobotWheelAngles::_internal_has_front_left() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RobotWheelAngles::has_front_left() const {
  return _internal_has_front_left();
}
inline void RobotWheelAngles::clear_front_left() {
  _impl_.front_left_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float RobotWheelAngles::_internal_front_left() const {
  return _impl_.front_left_;
}
inline float RobotWheelAngles::front_left() const {
  // @@protoc_insertion_point(field_get:RobotWheelAngles.front_left)
  return _internal_front_left();
}
inline void RobotWheelAngles::_internal_set_front_left(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.front_left_ = value;
}
inline void RobotWheelAngles::set_front_left(float value) {
  _internal_set_front_left(value);
  // @@protoc_insertion_point(field_set:RobotWheelAngles.front_left)
}

// -------------------------------------------------------------------

// RobotSpecs

// required .RobotId id = 1;
inline bool RobotSpecs::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.id_ != nullptr);
  return value;
}
inline bool RobotSpecs::has_id() const {
  return _internal_has_id();
}
inline const ::RobotId& RobotSpecs::_internal_id() const {
  const ::RobotId* p = _impl_.id_;
  return p != nullptr ? *p : reinterpret_cast<const ::RobotId&>(
      ::_RobotId_default_instance_);
}
inline const ::RobotId& RobotSpecs::id() const {
  // @@protoc_insertion_point(field_get:RobotSpecs.id)
  return _internal_id();
}
inline void RobotSpecs::unsafe_arena_set_allocated_id(
    ::RobotId* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.id_);
  }
  _impl_.id_ = id;
  if (id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RobotSpecs.id)
}
inline ::RobotId* RobotSpecs::release_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::RobotId* temp = _impl_.id_;
  _impl_.id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::RobotId* RobotSpecs::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:RobotSpecs.id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::RobotId* temp = _impl_.id_;
  _impl_.id_ = nullptr;
  return temp;
}
inline ::RobotId* RobotSpecs::_internal_mutable_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.id_ == nullptr) {
    auto* p = CreateMaybeMessage<::RobotId>(GetArenaForAllocation());
    _impl_.id_ = p;
  }
  return _impl_.id_;
}
inline ::RobotId* RobotSpecs::mutable_id() {
  ::RobotId* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:RobotSpecs.id)
  return _msg;
}
inline void RobotSpecs::set_allocated_id(::RobotId* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.id_ = id;
  // @@protoc_insertion_point(field_set_allocated:RobotSpecs.id)
}

// optional float radius = 2 [default = 0.09];
inline bool RobotSpecs::_internal_has_radius() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool RobotSpecs::has_radius() const {
  return _internal_has_radius();
}
inline void RobotSpecs::clear_radius() {
  _impl_.radius_ = 0.09f;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline float RobotSpecs::_internal_radius() const {
  return _impl_.radius_;
}
inline float RobotSpecs::radius() const {
  // @@protoc_insertion_point(field_get:RobotSpecs.radius)
  return _internal_radius();
}
inline void RobotSpecs::_internal_set_radius(float value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.radius_ = value;
}
inline void RobotSpecs::set_radius(float value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:RobotSpecs.radius)
}

// optional float height = 3 [default = 0.15];
inline bool RobotSpecs::_internal_has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool RobotSpecs::has_height() const {
  return _internal_has_height();
}
inline void RobotSpecs::clear_height() {
  _impl_.height_ = 0.15f;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline float RobotSpecs::_internal_height() const {
  return _impl_.height_;
}
inline float RobotSpecs::height() const {
  // @@protoc_insertion_point(field_get:RobotSpecs.height)
  return _internal_height();
}
inline void RobotSpecs::_internal_set_height(float value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.height_ = value;
}
inline void RobotSpecs::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:RobotSpecs.height)
}

// optional float mass = 4;
inline bool RobotSpecs::_internal_has_mass() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RobotSpecs::has_mass() const {
  return _internal_has_mass();
}
inline void RobotSpecs::clear_mass() {
  _impl_.mass_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float RobotSpecs::_internal_mass() const {
  return _impl_.mass_;
}
inline float RobotSpecs::mass() const {
  // @@protoc_insertion_point(field_get:RobotSpecs.mass)
  return _internal_mass();
}
inline void RobotSpecs::_internal_set_mass(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.mass_ = value;
}
inline void RobotSpecs::set_mass(float value) {
  _internal_set_mass(value);
  // @@protoc_insertion_point(field_set:RobotSpecs.mass)
}

// optional float max_linear_kick_speed = 7;
inline bool RobotSpecs::_internal_has_max_linear_kick_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RobotSpecs::has_max_linear_kick_speed() const {
  return _internal_has_max_linear_kick_speed();
}
inline void RobotSpecs::clear_max_linear_kick_speed() {
  _impl_.max_linear_kick_speed_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float RobotSpecs::_internal_max_linear_kick_speed() const {
  return _impl_.max_linear_kick_speed_;
}
inline float RobotSpecs::max_linear_kick_speed() const {
  // @@protoc_insertion_point(field_get:RobotSpecs.max_linear_kick_speed)
  return _internal_max_linear_kick_speed();
}
inline void RobotSpecs::_internal_set_max_linear_kick_speed(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.max_linear_kick_speed_ = value;
}
inline void RobotSpecs::set_max_linear_kick_speed(float value) {
  _internal_set_max_linear_kick_speed(value);
  // @@protoc_insertion_point(field_set:RobotSpecs.max_linear_kick_speed)
}

// optional float max_chip_kick_speed = 8;
inline bool RobotSpecs::_internal_has_max_chip_kick_speed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RobotSpecs::has_max_chip_kick_speed() const {
  return _internal_has_max_chip_kick_speed();
}
inline void RobotSpecs::clear_max_chip_kick_speed() {
  _impl_.max_chip_kick_speed_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float RobotSpecs::_internal_max_chip_kick_speed() const {
  return _impl_.max_chip_kick_speed_;
}
inline float RobotSpecs::max_chip_kick_speed() const {
  // @@protoc_insertion_point(field_get:RobotSpecs.max_chip_kick_speed)
  return _internal_max_chip_kick_speed();
}
inline void RobotSpecs::_internal_set_max_chip_kick_speed(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.max_chip_kick_speed_ = value;
}
inline void RobotSpecs::set_max_chip_kick_speed(float value) {
  _internal_set_max_chip_kick_speed(value);
  // @@protoc_insertion_point(field_set:RobotSpecs.max_chip_kick_speed)
}

// optional float center_to_dribbler = 9;
inline bool RobotSpecs::_internal_has_center_to_dribbler() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RobotSpecs::has_center_to_dribbler() const {
  return _internal_has_center_to_dribbler();
}
inline void RobotSpecs::clear_center_to_dribbler() {
  _impl_.center_to_dribbler_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float RobotSpecs::_internal_center_to_dribbler() const {
  return _impl_.center_to_dribbler_;
}
inline float RobotSpecs::center_to_dribbler() const {
  // @@protoc_insertion_point(field_get:RobotSpecs.center_to_dribbler)
  return _internal_center_to_dribbler();
}
inline void RobotSpecs::_internal_set_center_to_dribbler(float value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.center_to_dribbler_ = value;
}
inline void RobotSpecs::set_center_to_dribbler(float value) {
  _internal_set_center_to_dribbler(value);
  // @@protoc_insertion_point(field_set:RobotSpecs.center_to_dribbler)
}

// optional .RobotLimits limits = 10;
inline bool RobotSpecs::_internal_has_limits() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.limits_ != nullptr);
  return value;
}
inline bool RobotSpecs::has_limits() const {
  return _internal_has_limits();
}
inline void RobotSpecs::clear_limits() {
  if (_impl_.limits_ != nullptr) _impl_.limits_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::RobotLimits& RobotSpecs::_internal_limits() const {
  const ::RobotLimits* p = _impl_.limits_;
  return p != nullptr ? *p : reinterpret_cast<const ::RobotLimits&>(
      ::_RobotLimits_default_instance_);
}
inline const ::RobotLimits& RobotSpecs::limits() const {
  // @@protoc_insertion_point(field_get:RobotSpecs.limits)
  return _internal_limits();
}
inline void RobotSpecs::unsafe_arena_set_allocated_limits(
    ::RobotLimits* limits) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.limits_);
  }
  _impl_.limits_ = limits;
  if (limits) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RobotSpecs.limits)
}
inline ::RobotLimits* RobotSpecs::release_limits() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::RobotLimits* temp = _impl_.limits_;
  _impl_.limits_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::RobotLimits* RobotSpecs::unsafe_arena_release_limits() {
  // @@protoc_insertion_point(field_release:RobotSpecs.limits)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::RobotLimits* temp = _impl_.limits_;
  _impl_.limits_ = nullptr;
  return temp;
}
inline ::RobotLimits* RobotSpecs::_internal_mutable_limits() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.limits_ == nullptr) {
    auto* p = CreateMaybeMessage<::RobotLimits>(GetArenaForAllocation());
    _impl_.limits_ = p;
  }
  return _impl_.limits_;
}
inline ::RobotLimits* RobotSpecs::mutable_limits() {
  ::RobotLimits* _msg = _internal_mutable_limits();
  // @@protoc_insertion_point(field_mutable:RobotSpecs.limits)
  return _msg;
}
inline void RobotSpecs::set_allocated_limits(::RobotLimits* limits) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.limits_;
  }
  if (limits) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(limits);
    if (message_arena != submessage_arena) {
      limits = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, limits, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.limits_ = limits;
  // @@protoc_insertion_point(field_set_allocated:RobotSpecs.limits)
}

// optional .RobotWheelAngles wheel_angles = 13;
inline bool RobotSpecs::_internal_has_wheel_angles() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.wheel_angles_ != nullptr);
  return value;
}
inline bool RobotSpecs::has_wheel_angles() const {
  return _internal_has_wheel_angles();
}
inline void RobotSpecs::clear_wheel_angles() {
  if (_impl_.wheel_angles_ != nullptr) _impl_.wheel_angles_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::RobotWheelAngles& RobotSpecs::_internal_wheel_angles() const {
  const ::RobotWheelAngles* p = _impl_.wheel_angles_;
  return p != nullptr ? *p : reinterpret_cast<const ::RobotWheelAngles&>(
      ::_RobotWheelAngles_default_instance_);
}
inline const ::RobotWheelAngles& RobotSpecs::wheel_angles() const {
  // @@protoc_insertion_point(field_get:RobotSpecs.wheel_angles)
  return _internal_wheel_angles();
}
inline void RobotSpecs::unsafe_arena_set_allocated_wheel_angles(
    ::RobotWheelAngles* wheel_angles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wheel_angles_);
  }
  _impl_.wheel_angles_ = wheel_angles;
  if (wheel_angles) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RobotSpecs.wheel_angles)
}
inline ::RobotWheelAngles* RobotSpecs::release_wheel_angles() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::RobotWheelAngles* temp = _impl_.wheel_angles_;
  _impl_.wheel_angles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::RobotWheelAngles* RobotSpecs::unsafe_arena_release_wheel_angles() {
  // @@protoc_insertion_point(field_release:RobotSpecs.wheel_angles)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::RobotWheelAngles* temp = _impl_.wheel_angles_;
  _impl_.wheel_angles_ = nullptr;
  return temp;
}
inline ::RobotWheelAngles* RobotSpecs::_internal_mutable_wheel_angles() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.wheel_angles_ == nullptr) {
    auto* p = CreateMaybeMessage<::RobotWheelAngles>(GetArenaForAllocation());
    _impl_.wheel_angles_ = p;
  }
  return _impl_.wheel_angles_;
}
inline ::RobotWheelAngles* RobotSpecs::mutable_wheel_angles() {
  ::RobotWheelAngles* _msg = _internal_mutable_wheel_angles();
  // @@protoc_insertion_point(field_mutable:RobotSpecs.wheel_angles)
  return _msg;
}
inline void RobotSpecs::set_allocated_wheel_angles(::RobotWheelAngles* wheel_angles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.wheel_angles_;
  }
  if (wheel_angles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(wheel_angles);
    if (message_arena != submessage_arena) {
      wheel_angles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wheel_angles, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.wheel_angles_ = wheel_angles;
  // @@protoc_insertion_point(field_set_allocated:RobotSpecs.wheel_angles)
}

// optional .google.protobuf.Any custom = 14;
inline bool RobotSpecs::_internal_has_custom() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.custom_ != nullptr);
  return value;
}
inline bool RobotSpecs::has_custom() const {
  return _internal_has_custom();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& RobotSpecs::_internal_custom() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.custom_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& RobotSpecs::custom() const {
  // @@protoc_insertion_point(field_get:RobotSpecs.custom)
  return _internal_custom();
}
inline void RobotSpecs::unsafe_arena_set_allocated_custom(
    ::PROTOBUF_NAMESPACE_ID::Any* custom) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.custom_);
  }
  _impl_.custom_ = custom;
  if (custom) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RobotSpecs.custom)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* RobotSpecs::release_custom() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.custom_;
  _impl_.custom_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* RobotSpecs::unsafe_arena_release_custom() {
  // @@protoc_insertion_point(field_release:RobotSpecs.custom)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.custom_;
  _impl_.custom_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* RobotSpecs::_internal_mutable_custom() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.custom_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.custom_ = p;
  }
  return _impl_.custom_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* RobotSpecs::mutable_custom() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_custom();
  // @@protoc_insertion_point(field_mutable:RobotSpecs.custom)
  return _msg;
}
inline void RobotSpecs::set_allocated_custom(::PROTOBUF_NAMESPACE_ID::Any* custom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.custom_);
  }
  if (custom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom));
    if (message_arena != submessage_arena) {
      custom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.custom_ = custom;
  // @@protoc_insertion_point(field_set_allocated:RobotSpecs.custom)
}

// -------------------------------------------------------------------

// RealismConfig

// optional .google.protobuf.Any custom = 1;
inline bool RealismConfig::_internal_has_custom() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.custom_ != nullptr);
  return value;
}
inline bool RealismConfig::has_custom() const {
  return _internal_has_custom();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& RealismConfig::_internal_custom() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.custom_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& RealismConfig::custom() const {
  // @@protoc_insertion_point(field_get:RealismConfig.custom)
  return _internal_custom();
}
inline void RealismConfig::unsafe_arena_set_allocated_custom(
    ::PROTOBUF_NAMESPACE_ID::Any* custom) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.custom_);
  }
  _impl_.custom_ = custom;
  if (custom) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RealismConfig.custom)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* RealismConfig::release_custom() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.custom_;
  _impl_.custom_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* RealismConfig::unsafe_arena_release_custom() {
  // @@protoc_insertion_point(field_release:RealismConfig.custom)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.custom_;
  _impl_.custom_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* RealismConfig::_internal_mutable_custom() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.custom_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.custom_ = p;
  }
  return _impl_.custom_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* RealismConfig::mutable_custom() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_custom();
  // @@protoc_insertion_point(field_mutable:RealismConfig.custom)
  return _msg;
}
inline void RealismConfig::set_allocated_custom(::PROTOBUF_NAMESPACE_ID::Any* custom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.custom_);
  }
  if (custom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom));
    if (message_arena != submessage_arena) {
      custom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.custom_ = custom;
  // @@protoc_insertion_point(field_set_allocated:RealismConfig.custom)
}

// -------------------------------------------------------------------

// SimulatorConfig

// optional .SSL_GeometryData geometry = 1;
inline bool SimulatorConfig::_internal_has_geometry() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.geometry_ != nullptr);
  return value;
}
inline bool SimulatorConfig::has_geometry() const {
  return _internal_has_geometry();
}
inline const ::SSL_GeometryData& SimulatorConfig::_internal_geometry() const {
  const ::SSL_GeometryData* p = _impl_.geometry_;
  return p != nullptr ? *p : reinterpret_cast<const ::SSL_GeometryData&>(
      ::_SSL_GeometryData_default_instance_);
}
inline const ::SSL_GeometryData& SimulatorConfig::geometry() const {
  // @@protoc_insertion_point(field_get:SimulatorConfig.geometry)
  return _internal_geometry();
}
inline void SimulatorConfig::unsafe_arena_set_allocated_geometry(
    ::SSL_GeometryData* geometry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.geometry_);
  }
  _impl_.geometry_ = geometry;
  if (geometry) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SimulatorConfig.geometry)
}
inline ::SSL_GeometryData* SimulatorConfig::release_geometry() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::SSL_GeometryData* temp = _impl_.geometry_;
  _impl_.geometry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SSL_GeometryData* SimulatorConfig::unsafe_arena_release_geometry() {
  // @@protoc_insertion_point(field_release:SimulatorConfig.geometry)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::SSL_GeometryData* temp = _impl_.geometry_;
  _impl_.geometry_ = nullptr;
  return temp;
}
inline ::SSL_GeometryData* SimulatorConfig::_internal_mutable_geometry() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.geometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::SSL_GeometryData>(GetArenaForAllocation());
    _impl_.geometry_ = p;
  }
  return _impl_.geometry_;
}
inline ::SSL_GeometryData* SimulatorConfig::mutable_geometry() {
  ::SSL_GeometryData* _msg = _internal_mutable_geometry();
  // @@protoc_insertion_point(field_mutable:SimulatorConfig.geometry)
  return _msg;
}
inline void SimulatorConfig::set_allocated_geometry(::SSL_GeometryData* geometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.geometry_);
  }
  if (geometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(geometry));
    if (message_arena != submessage_arena) {
      geometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geometry, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.geometry_ = geometry;
  // @@protoc_insertion_point(field_set_allocated:SimulatorConfig.geometry)
}

// repeated .RobotSpecs robot_specs = 2;
inline int SimulatorConfig::_internal_robot_specs_size() const {
  return _impl_.robot_specs_.size();
}
inline int SimulatorConfig::robot_specs_size() const {
  return _internal_robot_specs_size();
}
inline void SimulatorConfig::clear_robot_specs() {
  _impl_.robot_specs_.Clear();
}
inline ::RobotSpecs* SimulatorConfig::mutable_robot_specs(int index) {
  // @@protoc_insertion_point(field_mutable:SimulatorConfig.robot_specs)
  return _impl_.robot_specs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RobotSpecs >*
SimulatorConfig::mutable_robot_specs() {
  // @@protoc_insertion_point(field_mutable_list:SimulatorConfig.robot_specs)
  return &_impl_.robot_specs_;
}
inline const ::RobotSpecs& SimulatorConfig::_internal_robot_specs(int index) const {
  return _impl_.robot_specs_.Get(index);
}
inline const ::RobotSpecs& SimulatorConfig::robot_specs(int index) const {
  // @@protoc_insertion_point(field_get:SimulatorConfig.robot_specs)
  return _internal_robot_specs(index);
}
inline ::RobotSpecs* SimulatorConfig::_internal_add_robot_specs() {
  return _impl_.robot_specs_.Add();
}
inline ::RobotSpecs* SimulatorConfig::add_robot_specs() {
  ::RobotSpecs* _add = _internal_add_robot_specs();
  // @@protoc_insertion_point(field_add:SimulatorConfig.robot_specs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RobotSpecs >&
SimulatorConfig::robot_specs() const {
  // @@protoc_insertion_point(field_list:SimulatorConfig.robot_specs)
  return _impl_.robot_specs_;
}

// optional .RealismConfig realism_config = 3;
inline bool SimulatorConfig::_internal_has_realism_config() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.realism_config_ != nullptr);
  return value;
}
inline bool SimulatorConfig::has_realism_config() const {
  return _internal_has_realism_config();
}
inline void SimulatorConfig::clear_realism_config() {
  if (_impl_.realism_config_ != nullptr) _impl_.realism_config_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::RealismConfig& SimulatorConfig::_internal_realism_config() const {
  const ::RealismConfig* p = _impl_.realism_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::RealismConfig&>(
      ::_RealismConfig_default_instance_);
}
inline const ::RealismConfig& SimulatorConfig::realism_config() const {
  // @@protoc_insertion_point(field_get:SimulatorConfig.realism_config)
  return _internal_realism_config();
}
inline void SimulatorConfig::unsafe_arena_set_allocated_realism_config(
    ::RealismConfig* realism_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.realism_config_);
  }
  _impl_.realism_config_ = realism_config;
  if (realism_config) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SimulatorConfig.realism_config)
}
inline ::RealismConfig* SimulatorConfig::release_realism_config() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::RealismConfig* temp = _impl_.realism_config_;
  _impl_.realism_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::RealismConfig* SimulatorConfig::unsafe_arena_release_realism_config() {
  // @@protoc_insertion_point(field_release:SimulatorConfig.realism_config)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::RealismConfig* temp = _impl_.realism_config_;
  _impl_.realism_config_ = nullptr;
  return temp;
}
inline ::RealismConfig* SimulatorConfig::_internal_mutable_realism_config() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.realism_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::RealismConfig>(GetArenaForAllocation());
    _impl_.realism_config_ = p;
  }
  return _impl_.realism_config_;
}
inline ::RealismConfig* SimulatorConfig::mutable_realism_config() {
  ::RealismConfig* _msg = _internal_mutable_realism_config();
  // @@protoc_insertion_point(field_mutable:SimulatorConfig.realism_config)
  return _msg;
}
inline void SimulatorConfig::set_allocated_realism_config(::RealismConfig* realism_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.realism_config_;
  }
  if (realism_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(realism_config);
    if (message_arena != submessage_arena) {
      realism_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, realism_config, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.realism_config_ = realism_config;
  // @@protoc_insertion_point(field_set_allocated:SimulatorConfig.realism_config)
}

// optional uint32 vision_port = 4;
inline bool SimulatorConfig::_internal_has_vision_port() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SimulatorConfig::has_vision_port() const {
  return _internal_has_vision_port();
}
inline void SimulatorConfig::clear_vision_port() {
  _impl_.vision_port_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t SimulatorConfig::_internal_vision_port() const {
  return _impl_.vision_port_;
}
inline uint32_t SimulatorConfig::vision_port() const {
  // @@protoc_insertion_point(field_get:SimulatorConfig.vision_port)
  return _internal_vision_port();
}
inline void SimulatorConfig::_internal_set_vision_port(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.vision_port_ = value;
}
inline void SimulatorConfig::set_vision_port(uint32_t value) {
  _internal_set_vision_port(value);
  // @@protoc_insertion_point(field_set:SimulatorConfig.vision_port)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ssl_5fsimulation_5fconfig_2eproto
